// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  settings    Settings?
  tasks       Task[]
  taskHistory TaskHistory[]
}

model Settings {
  id                 String   @id @default(uuid())
  userId             String   @unique
  pomodoroMinutes    Int      @default(25)
  shortBreakMinutes  Int      @default(5)
  longBreakMinutes   Int      @default(15)
  longBreakInterval  Int      @default(4)
  autoStartBreaks    Boolean  @default(false)
  autoStartPomodoros Boolean  @default(false)
  darkMode           Boolean  @default(false)
  alarmSound         String   @default("kitchen")
  alarmVolume        Int      @default(50)
  tickingSound       String   @default("none")
  tickingVolume      Int      @default(50)
  alarmRepeat        Int      @default(1)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id                 String        @id @default(uuid())
  userId             String
  text               String
  completed          Boolean       @default(false)
  estimatedPomodoros Int           @default(1)
  completedPomodoros Int           @default(0)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  taskHistory        TaskHistory[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TaskHistory {
  id        String   @id @default(uuid())
  userId    String
  taskId    String?
  taskName  String
  date      DateTime @default(now())
  minutes   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)
}
